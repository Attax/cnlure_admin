# 定义 Docker Compose 版本
version: "3.8"

# 定义服务（容器）
services:
    # PHP 应用服务 - 运行 Laravel 代码
    app:
        # 构建自定义镜像（因为我们需要特定的 PHP 环境）
        build:
            context: . # 使用当前目录作为构建上下文
            dockerfile: Dockerfile # 指定 Dockerfile 文件
        # 给构建的镜像命名，便于管理
        image: laravel-app:php8.4
        # 容器名称
        container_name: laravel_app
        # 自动重启策略（除非手动停止，否则总是重启）
        restart: unless-stopped
        # 工作目录
        working_dir: /var/www/html
        # 数据卷挂载（将主机文件同步到容器）
        volumes:
            # 将当前项目目录挂载到容器的 /var/www/html
            # 这样在主机修改代码，容器内立即生效（开发环境非常有用）
            - .:/var/www/html
        # 网络配置 - 所有服务在同一个网络内，可以通过服务名互相访问
        networks:
            - laravel_network
        # 依赖关系 - 确保 mysql 服务先启动
        depends_on:
            - mysql
        # 环境变量（也可以从 .env 文件读取）
        environment:
            - APP_ENV=local
            - DB_HOST=mysql # 使用服务名作为主机名
            - DB_DATABASE=laravel
            - DB_USERNAME=laravel
            - DB_PASSWORD=secret

    # Nginx Web 服务器 - 处理 HTTP 请求
    webserver:
        # 使用官方 Nginx 镜像（无需自定义构建）
        image: nginx:alpine
        container_name: laravel_nginx
        restart: unless-stopped
        # 端口映射：主机端口:容器端口
        # 访问 http://localhost:8000 会转发到容器的 80 端口
        ports:
            - "8000:80"
        # 数据卷挂载
        volumes:
            # 挂载代码（与 app 服务相同的挂载点）
            - .:/var/www/html
            # 挂载 Nginx 配置文件（覆盖默认配置）
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        networks:
            - laravel_network
        # 依赖关系 - 确保 PHP 服务先启动
        depends_on:
            - app

    # MySQL 数据库服务
    mysql:
        image: mysql:8.0
        container_name: laravel_mysql
        restart: unless-stopped
        # 数据库配置（通过环境变量）
        environment:
            MYSQL_ROOT_PASSWORD: secret # root 用户密码
            MYSQL_DATABASE: laravel # 创建的数据库名
            MYSQL_USER: laravel # 创建的用户名
            MYSQL_PASSWORD: secret # 用户密码
            MYSQL_CHARSET: utf8mb4 # 字符集
            MYSQL_COLLATION: utf8mb4_unicode_ci # 排序规则
        # 数据卷挂载 - 使用命名卷持久化数据库数据
        volumes:
            # mysql_data 是在下面 volumes 部分定义的命名卷
            # 这样即使删除容器，数据库数据也不会丢失
            - mysql_data:/var/lib/mysql
        networks:
            - laravel_network
        # 可选：将数据库端口映射到主机，方便用工具连接
        ports:
            - "3306:3306"

# 定义数据卷（顶级配置）
volumes:
    # 命名卷：mysql_data
    # 用于持久化 MySQL 数据，独立于容器生命周期
    mysql_data:
        driver: local # 使用本地驱动

# 定义网络（顶级配置）
networks:
    # 自定义网络：laravel_network
    # 所有服务加入这个网络后，可以通过服务名互相访问
    # 比如 app 服务可以通过 "mysql" 主机名访问数据库
    laravel_network:
        driver: bridge # 使用桥接网络
